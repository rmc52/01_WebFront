div{
    border : 1px solid black;
    box-sizing: border-box;
    /* content + padding + border 합으로 width/height 지정 */
}


.item{
    width: 75px;
    height: 75px;
}


.item1{background-color: red;}
.item2{background-color: orangered;}
.item3{background-color: orange;}
.item4{background-color: yellow;}
.item5{background-color: yellowgreen;}
.item6{background-color: green;}
.item7{background-color: lightblue;}
.item8{background-color: blue;}
.item9{background-color: violet;}


/* flexbox중 부모 요소 */
.flex-container {
height: 450px;

display: flex;/* 메인축이 row가됨*/
/* 부모 요소에게 주는 css 속성, 이 요소를 flexbox로 만들겠다*/
/* 이하 모두 display: flex; 상태에서만 명령가능 */

/*  flex-direction (*부모 전용 속성*)  */
/*  메인축의 방향과 시작 위치를 지정하는 속성 */


/* flex-direction: row; */
/* 행 방향 메인축 (가로, 기본값) */ 
/* 컨트롤 + 슬래시 = 커서있는 줄 주석처리 */


/* flex-direction: column; */
/* 열 방향 메인축 (세로)*/


/* flex-direction: row-reverse; */
/*  행 방향 메인축 + 순서 반대 뒤집힘  */


/* flex-direction: column-reverse; */
/*  열 방향 메인축 + 순서 반대 뒤집힘  */



/*  flex-wrap (부모 전용 속성)  */
/* 내부 item들을 포장하는 속성 
    item들이 강제로 한줄에 배치되게 할지, 
    한줄을 벗어나 여러줄로 배치할 것인지 지정*/

 /* item을 한줄로 배치 (기본값) 크기를 줄일때 같이 짜부됨*/
/* flex-wrap: nowrap; */

/* flex-wrap: wrap; */
/* item을 여러줄로 배치 - 짜부 안되고 다음줄로 내려감 */



/* flex-wrap: wrap-reverse; */
/* item을 여러줄로 배치 (뒤에서 배치) */


/* 메인축을 열방향으로 바꾸고 아래 내용 다시 테스트 해보기 */
/* flex-direction: column; */




/* 중요 */
/* justify-content (부모 전용 속성) */
/* 메인축 방향으로 item의 정렬 방법을 조정함 */

/* 메인축 방향으로 앞에서부터 정렬(기본값) */
/* justify-content: flex-start; */

/* justify-content: flex-end; */
/* 메인축 방향으로 뒤에 붙어서 정렬 */


/* justify-content: center; */
/* 메인축 방향으로 가운데 정렬 */

/* justify-content: space-around; */
/* item 주위에 메인축 방향으로 일정한 크기의 공간을 추가
    ->양끝은 조금, item 중간 사이사이는 넓게 떨어져있다,
    ->브라우저 크기에 따라 변함*/

/* justify-content: space-evenly; */
/* item이 메인축 내에서 동일한 간격을 가짐 */


/* justify-content: space-between; */
/* 양 끝을 붙인 상태에서 item들의 간격을 일정하게정렬 */



/* align-items (부모 전용 속성) */
/*  item들을 교차축 방향으로 정렬하는 속성 */

/* align-items: flex-start; 교차축 앞에서 부터 정렬 (기본값) */
/* align-items: flex-end;  */
/*교차축 끝에 붙어서 정렬 (row 기준 맨아래 왼쪽, column 기준 오른쪽 위)*/
/* align-items: center; */

}


/* 요소 정가운데 배치하기 */

#con {
    width: 450px;
    height: 450px;

display: flex;

/* 메인축 가운데정렬 */
/* justify-content: center; */
/* 교차축 가운데정렬 */
/* align-items: center; */


}

#center {
    width: 80px;
    height: 80px;
    background-color: red;
}

/* item(자식)에게 주는 flex 속성 */ /*원래 가로로 나와야하는데 지금 세로로나오는중*/
.basis-20 {
    /* auto (기본값)
       0 : 본래 요소의 크기 중 content 영역만을 남겨두고 차지하는 영역 없음(적혀있는 글자가 차지하는영역만 냅둠)
    요소 본래의 크기만큼을 가짐 */
    /* flex-basis: auto; */
    flex-basis: 20%;
}

.basis-30 {
    flex-basis: 30%;
}

.basis-50 {
    flex-basis: 50%;
}


/* flex-grow 
    0(기본값) : 
    item이 추가적인 가용공간을 차지하지 않음
    자신의 초기 크기만을 유지
    * 설정값은 여백의 비율로 적용됨

*/
/* =원판이 차지하는공간을(지금은 item의 75x75칸) 제외하고 남는 여백을 일정비율로 나눠먹음 */
.grow1 {
    flex-grow: 1;
}

.grow2 {
    flex-grow: 2;
}
.grow3 {
    flex-grow: 1;
}


/* flex-shrink
    1(기본값) : 
    컨테이너 크기가 줄어들면
    다른 항목들과 함께 비율적으로
    축소될 수 있음을 의미 
    */

.shrink1 {
    flex-shrink: 1;
}

.shrink2 {
    flex-shrink: 0; /* 0 : 항목이(item) 줄어들지 않음을 의미
                    -> 컨테이너의 크기가 줄어들어도 비율이 축소되지 않음*/
}

/* flex */

.flex-test1 {
    flex: 1;
/* flex-grow : 1;
    flex-shrink : 1;
    flex-basis : 0%; < grow는 원래 칸을 쳐먹으나 베이시스 0으로하면 그걸 없는셈치고 grow에 따름    
*/

}

.flex-test2 {
    flex: 1 1 auto;
    /* flex-grow : 1;
    flex-shrink : 1;
    flex-basis : auto; */
}


.flex-test3 {
    flex: 1 500px
    /* 1,1,500px */
}


/* order 
    기본값 0 
    정수값을 가질 수 있고 양수, 0, 음수 가능
    값이 작을수록 앞부분으로 이동함

    */
.order:nth-child(1) {order: 0;} /* A */
.order:nth-child(2) {order: -2;} /* B */
.order:nth-child(3) {order: 1;}


/* flex-basis : calc(100% / 3); */


/**/